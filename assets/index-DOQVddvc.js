import{G as P,A as F,C as k,a as S,S as E,P as g}from"./vendor-BiLYUgnc.js";(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const i of document.querySelectorAll('link[rel="modulepreload"]'))n(i);new MutationObserver(i=>{for(const s of i)if(s.type==="childList")for(const o of s.addedNodes)o.tagName==="LINK"&&o.rel==="modulepreload"&&n(o)}).observe(document,{childList:!0,subtree:!0});function e(i){const s={};return i.integrity&&(s.integrity=i.integrity),i.referrerPolicy&&(s.referrerPolicy=i.referrerPolicy),i.crossOrigin==="use-credentials"?s.credentials="include":i.crossOrigin==="anonymous"?s.credentials="omit":s.credentials="same-origin",s}function n(i){if(i.ep)return;i.ep=!0;const s=e(i);fetch(i.href,s)}})();class A{constructor(t,e,n,i,s,o){this.app=t,this.holder=o,this.focusMarker=null,this.spineboy=e,this.physicsBones=n,this.animationMixController=i,this.globalSettings=s,this.uiContainer=null,this.isUIVisible=!0,this.initUI()}initUI(){this.uiContainer=document.createElement("div"),this.uiContainer.style.position="fixed",this.uiContainer.style.top="10px",this.uiContainer.style.left="10px",this.uiContainer.style.backgroundColor="rgba(0, 0, 0, 0.7)",this.uiContainer.style.color="white",this.uiContainer.style.padding="15px",this.uiContainer.style.borderRadius="5px",this.uiContainer.style.fontFamily="Arial, sans-serif",this.uiContainer.style.zIndex="1000",this.uiContainer.style.maxWidth="300px",document.body.appendChild(this.uiContainer);const t=document.createElement("h3");t.textContent="Spine Physics Settings",t.style.marginTop="0",this.uiContainer.appendChild(t);const e=document.createElement("button");e.textContent="Hide UI",e.style.marginBottom="10px",e.onclick=()=>this.toggleUI(),this.uiContainer.appendChild(e),this.createGlobalControls(),this.createAnimationControls()}createGlobalControls(){const t=document.createElement("h4");t.textContent="Global Settings",this.uiContainer.appendChild(t),this.createSlider("Scale",.1,2,.1,this.spineboy.scale.x,e=>{this.spineboy.scale.set(e)}),this.createSlider("Max Force",100,1e4,100,this.globalSettings.maxForce,e=>{this.globalSettings.maxForce=e}),this.createSlider("Max Speed",100,1e4,100,this.globalSettings.maxSpeed,e=>{this.globalSettings.maxSpeed=e}),this.createSlider("Physics Strength",.1,10,.1,this.globalSettings.physicsStrengthMultiplier,e=>{this.globalSettings.physicsStrengthMultiplier=e})}createAnimationControls(){const t=document.createElement("h4");t.textContent="Animation Controls",this.uiContainer.appendChild(t);const e=this.spineboy.spineData.animations.map(s=>s.name),n=document.createElement("label");n.textContent="Select Animation: ",n.style.display="block",n.style.marginTop="10px",this.uiContainer.appendChild(n);const i=document.createElement("select");if(i.style.width="100%",i.style.marginBottom="10px",e.forEach(s=>{const o=document.createElement("option");o.value=s,o.textContent=s,i.appendChild(o)}),this.animationMixController.config.animations.length>0&&(i.value=this.animationMixController.config.animations[0].name),i.addEventListener("change",()=>{this.animationMixController.updateAnimation(1,{name:i.value})}),this.uiContainer.appendChild(i),this.animationMixController.config.animations.length>0){const s=this.animationMixController.config.animations[0].weight||1;this.createSlider("Animation Weight",0,1,.1,s,o=>{this.animationMixController.updateAnimation(1,{weight:o});const a=this.spineboy.state.getCurrent(1);a&&(a.alpha=o)})}if(this.animationMixController.config.animations.length>0){const s=this.animationMixController.config.animations[0].timeScale||1;this.createSlider("Animation Speed",.1,2,.1,s,o=>{this.animationMixController.updateAnimation(1,{timeScale:o});const a=this.spineboy.state.getCurrent(1);a&&(a.timeScale=o)})}}createBoneSpecificControls(){const t=document.createElement("h4");t.textContent="Bone Specific Settings",this.uiContainer.appendChild(t);const e=document.createElement("label");e.textContent="Select Bone: ",e.style.display="block",e.style.marginTop="10px",this.uiContainer.appendChild(e);const n=document.createElement("select");n.style.width="100%",n.style.marginBottom="10px",this.physicsBones.forEach(a=>{const r=document.createElement("option");r.value=a.bone.data.name,r.textContent=a.bone.data.name,n.appendChild(r)}),this.uiContainer.appendChild(n);const i=document.createElement("button");i.textContent="Focus on Bone",i.style.marginBottom="10px",i.style.width="100%",this.uiContainer.appendChild(i);const s=document.createElement("div");s.id="bone-settings",this.uiContainer.appendChild(s);const o=a=>{const r=this.physicsBones.find(l=>l.bone.data.name===a);if(r){this.removeFocusMarker();const l=new P;l.beginFill(16711680,.5),l.drawCircle(0,0,15),l.endFill(),l.x=r.bone.worldX,l.y=r.bone.worldY,this.app.stage.addChild(l),this.focusMarker=l,this.animateMarker(l),this.holder.x=this.app.screen.width/2-r.bone.worldX,this.holder.y=this.app.screen.height/2-r.bone.worldY}};this.animateMarker=a=>{let r=1,l=!1;const h=()=>{l?(r+=.02,r>=1.2&&(l=!1)):(r-=.02,r<=.8&&(l=!0)),a.scale.set(r),this.focusMarker===a&&requestAnimationFrame(h)};h()},this.removeFocusMarker=()=>{this.focusMarker&&(this.app.stage.removeChild(this.focusMarker),this.focusMarker.destroy(),this.focusMarker=null)},i.addEventListener("click",()=>{o(n.value)}),n.addEventListener("change",()=>{this.updateBoneSettingsUI(n.value,s),o(n.value)}),this.physicsBones.length>0&&(this.updateBoneSettingsUI(n.value,s),o(n.value))}updateBoneSettingsUI(t,e){e.innerHTML="";const n=this.physicsBones.find(i=>i.bone.data.name===t);n&&Object.keys(n.settings).forEach(i=>{if(typeof n.settings[i]=="number"&&!i.includes("Color")){let s=0,o=10,a=.1;i.includes("Damping")?o=5:i.includes("Shiftiness")?o=20:i.includes("Mass")?o=100:i.includes("Limit")&&(o=360,a=1),this.createSlider(i,s,o,a,n.settings[i],r=>{n.settings[i]=r},e)}else typeof n.settings[i]=="boolean"&&this.createCheckbox(i,n.settings[i],s=>{n.settings[i]=s},e)})}createSlider(t,e,n,i,s,o,a=null){a||(a=this.uiContainer);const r=document.createElement("div");r.style.marginBottom="10px";const l=document.createElement("label");l.textContent=`${t}: ${s}`,l.style.display="block",l.style.marginBottom="5px";const h=document.createElement("input");h.type="range",h.min=e,h.max=n,h.step=i,h.value=s,h.style.width="100%",h.addEventListener("input",()=>{const y=parseFloat(h.value);l.textContent=`${t}: ${y.toFixed(2)}`,o(y)}),r.appendChild(l),r.appendChild(h),a.appendChild(r)}createCheckbox(t,e,n,i=null){i||(i=this.uiContainer);const s=document.createElement("div");s.style.marginBottom="10px";const o=document.createElement("input");o.type="checkbox",o.checked=e,o.id=`checkbox-${t}`;const a=document.createElement("label");a.textContent=t,a.htmlFor=`checkbox-${t}`,a.style.marginLeft="5px",o.addEventListener("change",()=>{n(o.checked)}),s.appendChild(o),s.appendChild(a),i.appendChild(s)}toggleUI(){this.isUIVisible=!this.isUIVisible,this.uiContainer.style.display=this.isUIVisible?"block":"none";const t=this.uiContainer.querySelector("button");t.textContent=this.isUIVisible?"Hide UI":"Show UI"}destroy(){this.uiContainer&&this.uiContainer.parentNode&&this.uiContainer.parentNode.removeChild(this.uiContainer),this.removeFocusMarker()}}const b={maxForce:3e3,maxSpeed:5e3,physicsStrengthMultiplier:.8},w=window.location.hostname==="localhost"?"":"/spine-nikke-physic";class I{constructor(t,e){this.spine=t,this.config=e,this.nextPlayTimes=new Map,this.currentTimes=new Map,this.playedTracks=new Set,this.trackStates=new Map,this.spine.state.data.defaultMix=this.config.crossFadeDuration,e.animations.forEach(n=>{this.nextPlayTimes.set(n.track,Date.now()+n.delay),this.currentTimes.set(n.track,0),this.trackStates.set(n.track,{isPlaying:!1,lastAnimation:""})}),this.spine.state.addListener({complete:n=>{const i=n.trackIndex,s=this.trackStates.get(i);s&&(s.isPlaying=!1)},start:()=>{},interrupt:()=>{},end:()=>{},dispose:()=>{},event:()=>{}})}update(t){this.config.animations.forEach(e=>{const n=e.track,i=this.trackStates.get(n);if(e.loop){if(!this.playedTracks.has(n)){const s=this.spine.state.setAnimation(n,e.name,e.loop);e.weight!==void 0&&(s.alpha=e.weight),e.timeScale!==void 0&&(s.timeScale=e.timeScale),this.playedTracks.add(n),i&&(i.isPlaying=!0,i.lastAnimation=e.name)}}else{const s=t>=this.nextPlayTimes.get(n),o=!i?.isPlaying;if(s&&o){const a=this.spine.state.setAnimation(n,e.name,e.loop);e.weight!==void 0&&(a.alpha=e.weight),e.timeScale!==void 0&&(a.timeScale=e.timeScale),this.nextPlayTimes.set(n,t+e.delay),i&&(i.isPlaying=!0,i.lastAnimation=e.name)}}})}updateConfig(t){this.config={...this.config,...t},this.spine.state.data.defaultMix=this.config.crossFadeDuration}updateAnimation(t,e){const n=this.config.animations.findIndex(i=>i.track===t);n!==-1&&(this.config.animations[n]={...this.config.animations[n],...e},this.applyAnimationChanges(t))}applyAnimationChanges(t){const e=this.config.animations.find(i=>i.track===t);if(!e)return;const n=this.spine.state.getCurrent(t);if(n)if(n.animation?.name!==e.name){const i=this.spine.state.setAnimation(t,e.name,e.loop);e.weight!==void 0&&(i.alpha=e.weight),e.timeScale!==void 0&&(i.timeScale=e.timeScale)}else e.weight!==void 0&&(n.alpha=e.weight),e.timeScale!==void 0&&(n.timeScale=e.timeScale)}}class L{constructor(t,e,n,i){this.bone=t,this.settings=e,this.physicsConfig=n,this.initialLocalPosition=new g(t.x,t.y),this.currentPosition=new g(t.worldX,t.worldY),this.initialWorldPosition=new g(t.worldX,t.worldY),this.previousPosition=new g(t.worldX,t.worldY),this.velocity=new g(0,0),this.currentRotation=t.rotation,this.previousRotation=t.rotation,this.angleVelocity=0,this.isInitialized=!1,this.lastHolderPosition=new g(0,0),this.holderVelocity=new g(0,0),this.globalSettings=i}initialize(t){this.isInitialized||(this.currentPosition.set(this.bone.worldX,this.bone.worldY),this.initialWorldPosition.set(this.bone.worldX,this.bone.worldY),this.previousPosition.set(this.bone.worldX,this.bone.worldY),this.currentRotation=this.bone.rotation,this.previousRotation=this.bone.rotation,this.lastHolderPosition.copyFrom(t),this.isInitialized=!0)}updateHolderVelocity(t,e){e>0&&(this.holderVelocity.set((t.x-this.lastHolderPosition.x)/e,(t.y-this.lastHolderPosition.y)/e),this.lastHolderPosition.copyFrom(t))}applyHolderInertia(t){if(this.settings.Mass>0){if(this.bone.data.name.includes("hair"))return;const e=.5/this.settings.Mass;this.velocity.x+=this.holderVelocity.x*e,this.velocity.y+=this.holderVelocity.y*e}}applyRandomForce(t=100){if(!this.settings.FixPosition&&this.settings.Mass>0&&!this.bone.data.name.includes("hair")){const e=(this.physicsConfig.FireShakeMinForce+Math.random()*(this.physicsConfig.FireShakeMaxForce-this.physicsConfig.FireShakeMinForce))*this.globalSettings.physicsStrengthMultiplier,n=this.physicsConfig.ForceRandomAngleMin*(Math.PI/180),i=this.physicsConfig.ForceRandomAngleMax*(Math.PI/180),s=n+Math.random()*(i-n);this.velocity.x+=Math.cos(s)*e*t,this.velocity.y+=Math.sin(s)*e*t;const o=e*.02*this.globalSettings.physicsStrengthMultiplier;this.angleVelocity+=(Math.random()-.5)*2*o}}normalizeAngle(t){return t=t%360,t>180&&(t-=360),t<-180&&(t+=360),t}applyConstraints(t){if(this.settings.StretchLimit>0&&this.bone.parent){const e=Math.sqrt(this.initialLocalPosition.x**2+this.initialLocalPosition.y**2),n=new g(this.currentPosition.x-this.bone.parent.worldX,this.currentPosition.y-this.bone.parent.worldY),i=Math.sqrt(n.x**2+n.y**2),s=e*this.settings.StretchLimit;if(i>s){const o=s/i;this.currentPosition.set(this.bone.parent.worldX+n.x*o,this.bone.parent.worldY+n.y*o);const a=new g(n.x/i,n.y/i),r=this.velocity.x*a.x+this.velocity.y*a.y;r>0&&(this.velocity.x-=r*a.x*1.5,this.velocity.y-=r*a.y*1.5)}}if(this.settings.AngleLimit<180&&this.bone.parent){const e=this.normalizeAngle(this.currentRotation-this.bone.parent.rotation),n=this.settings.AngleLimit;if(Math.abs(e)>n){const i=Math.sign(e)*n;this.currentRotation=this.bone.parent.rotation+i,this.angleVelocity*=.2}}}applyToBone(){const t=this.currentPosition.x-this.initialWorldPosition.x,e=this.currentPosition.y-this.initialWorldPosition.y;this.bone.x=this.initialLocalPosition.x+t,this.bone.y=this.initialLocalPosition.y+e,this.bone.rotation=this.currentRotation}update(t,e){if(this.initialize(e),this.updateHolderVelocity(e,t),this.settings.FixPosition){this.currentPosition.set(this.bone.worldX,this.bone.worldY),this.currentRotation=this.bone.rotation,this.velocity.set(0,0),this.angleVelocity=0;return}this.applyHolderInertia(t),this.previousPosition.copyFrom(this.currentPosition),this.previousRotation=this.currentRotation;const n=this.bone.worldX,i=this.bone.worldY,s=this.bone.rotation,o=(n-this.currentPosition.x)*this.settings.Shiftiness,a=(i-this.currentPosition.y)*this.settings.Shiftiness,r=-this.velocity.x*this.settings.Damping,l=-this.velocity.y*this.settings.Damping,h=(s-this.currentRotation)*this.settings.SupportSpringShiftiness,y=-this.angleVelocity*this.settings.SupportSpringDamping;let f=(o+r)*this.settings.ForceMultiplier*this.globalSettings.physicsStrengthMultiplier,x=(a+l)*this.settings.ForceMultiplier*this.globalSettings.physicsStrengthMultiplier,u=(h+y)*this.settings.ForceMultiplier*this.globalSettings.physicsStrengthMultiplier;const m=this.globalSettings.maxForce;f=Math.max(-m,Math.min(m,f)),x=Math.max(-m,Math.min(m,x)),u=Math.max(-m,Math.min(m,u)),this.velocity.x+=f/this.settings.Mass*t,this.velocity.y+=x/this.settings.Mass*t,this.angleVelocity+=u/this.settings.Mass*t;const C=this.globalSettings.maxSpeed,c=Math.sqrt(this.velocity.x*this.velocity.x+this.velocity.y*this.velocity.y);c>C&&(this.velocity.x=this.velocity.x/c*C,this.velocity.y=this.velocity.y/c*C),this.currentPosition.x+=this.velocity.x*t,this.currentPosition.y+=this.velocity.y*t,this.currentRotation+=this.angleVelocity*t,this.currentRotation=this.normalizeAngle(this.currentRotation),this.applyConstraints(t),this.velocity.set((this.currentPosition.x-this.previousPosition.x)/t,(this.currentPosition.y-this.previousPosition.y)/t),this.angleVelocity=(this.currentRotation-this.previousRotation)/t;const d=.1;Math.abs(this.velocity.x)<d&&(this.velocity.x=0),Math.abs(this.velocity.y)<d&&(this.velocity.y=0),Math.abs(this.angleVelocity)<d&&(this.angleVelocity=0),this.applyToBone()}}async function B(){const p=new F({width:window.innerWidth,height:window.innerHeight,backgroundColor:0,backgroundAlpha:0,antialias:!0,resolution:window.devicePixelRatio||1,autoDensity:!0,resizeTo:window});document.body.appendChild(p.view);let t=new k;t.x=p.screen.width/2,t.y=p.screen.height/2,S.add({alias:"spineboy-data",src:w+"/c850_aim_00.skel"}),S.setPreferences({preferCreateImageBitmap:!1});let e;try{e=await S.load("spineboy-data")}catch(c){console.error("Failed to load Spine data:",c);return}const n=e.spineData,i=new E(n);i.x=0,i.y=400,i.scale.set(.5),t.addChild(i),p.stage.addChild(t),t.eventMode="static",t.cursor="pointer";let s=!1,o=null,a=null;t.on("pointerdown",c=>{s=!0,o=c.data,a=c.data.getLocalPosition(t.parent),t.alpha=.95}),t.on("pointerup",()=>{s=!1,o=null,t.alpha=1}),t.on("pointermove",c=>{if(s){const d=o.getLocalPosition(t.parent);t.x+=d.x-a.x,t.y+=d.y-a.y,a=d}});const r=await fetch(w+"/aim-physics.json").then(c=>c.json()),l=[],h=Object.keys(r.BoneSpringPhysicsSettingCollection);for(const c of i.skeleton.bones)if(h.includes(c.data.name)){const d=r.BoneSpringPhysicsSettingCollection[c.data.name];l.push(new L(c,d,r,b)),console.log(`Bone "${c.data.name}" added to physics.`)}const y={animations:[{name:"aim_idle",track:1,delay:200,loop:!0,weight:1}],crossFadeDuration:0},f=new I(i,y),x=new g(t.x,t.y);let u=null;const m=100;new A(p,i,l,f,b,t);function C(){l.forEach(d=>{d.applyRandomForce()});const c=i.state.setAnimation(2,"aim_fire",!1);c.alpha=1,c.timeScale=.4,c.listener={complete:()=>{i.state.setEmptyAnimation(2,.1)}}}document.addEventListener("mousedown",()=>{C(),u=setInterval(C,m)}),document.addEventListener("mouseup",()=>{u&&(clearInterval(u),u=null)}),document.addEventListener("mouseleave",()=>{u&&(clearInterval(u),u=null)}),p.ticker.add(c=>{const d=p.ticker.deltaMS/1e3,v=Date.now();x.set(t.x,t.y),i.update(d),f.update(v);for(const M of l)M.update(d,x);i.updateTransform()}),window.addEventListener("resize",()=>{t.x=p.screen.width/2,t.y=p.screen.height/2})}B();
